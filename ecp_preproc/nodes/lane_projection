#!/usr/bin/env python
# -*- coding: utf-8 -*-

################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

# Authors: Leon Jung, [AuTURBO] Ki Hoon Kim (https://github.com/auturbo), Gilbert

import rospy
import numpy as np
import cv2
from sensor_msgs.msg import Image, CompressedImage
from cv_bridge import CvBridge
from dynamic_reconfigure.server import Server
from ecp_preproc.cfg import ImageProjectionParamsConfig

class ImageProjection():
    def __init__(self):
        self.top_x = rospy.get_param("~/lane_projection/top_x")
        self.top_y = rospy.get_param("~/lane_projection/top_y")
        self.bottom_x = rospy.get_param("~/lane_projection/bottom_x")
        self.bottom_y = rospy.get_param("~/lane_projection/bottom_y")
        self.img_center_x = 160

        self.is_calibration_mode = rospy.get_param("~is_lane_camera_calibration_mode", False)
        if self.is_calibration_mode == True:
            srv_image_projection = Server(ImageProjectionParamsConfig, self.cbGetImageProjectionParam)
        else:
            rospy.loginfo("top_x : %d, top_y : %d, bottom_x : %d, bottom_y : %d", self.top_x, self.top_y, self.bottom_x, self.bottom_y)

        # subscribes compressed image 
        self.sub_image_original = rospy.Subscriber('/camera/image_input', CompressedImage, self.cbImageProjection, queue_size=1)
        # publishes ground-project image in compressed type 
        self.pub_image_projected = rospy.Publisher('/camera/image_output', CompressedImage, queue_size=1)

        if self.is_calibration_mode == True:
            # publishes calibration image in compressed type 
            self.pub_image_calib = rospy.Publisher('/camera/image_calib', CompressedImage, queue_size=1)
            
        self.cvBridge = CvBridge()


    def cbGetImageProjectionParam(self, config, level):
        rospy.loginfo("[Image Projection] Extrinsic Camera Calibration Parameter reconfigured to")
        rospy.loginfo("top_x : %d, top_y : %d, bottom_x : %d, bottom_y : %d", config.top_x, config.top_y, config.bottom_x, config.bottom_y)

        self.top_x = config.top_x
        self.top_y = config.top_y
        self.bottom_x = config.bottom_x
        self.bottom_y = config.bottom_y

        return config

    def cbImageProjection(self, msg_img):
        # converts compressed image to opencv image
        np_image_original = np.frombuffer(msg_img.data, np.uint8)
        cv_image_original = cv2.imdecode(np_image_original, cv2.IMREAD_COLOR)

        # setting homography variables
        top_x = self.top_x
        top_y = self.top_y
        bottom_x = self.bottom_x
        bottom_y = self.bottom_y

        if self.is_calibration_mode == True:
            # copy original image to use for cablibration
            cv_image_calib = np.copy(cv_image_original)

            # draw lines to help setting homography variables
            cv_image_calib = cv2.line(cv_image_calib, (self.img_center_x - top_x, top_y), (self.img_center_x + top_x, top_y), (0, 0, 255), 1)
            cv_image_calib = cv2.line(cv_image_calib, (self.img_center_x - bottom_x, bottom_y), (self.img_center_x + bottom_x, bottom_y), (0, 0, 255), 1)
            cv_image_calib = cv2.line(cv_image_calib, (self.img_center_x + bottom_x, bottom_y), (self.img_center_x + top_x, top_y), (0, 0, 255), 1)
            cv_image_calib = cv2.line(cv_image_calib, (self.img_center_x - bottom_x, bottom_y), (self.img_center_x - top_x, top_y), (0, 0, 255), 1)

            # publishes calibration image in compressed type
            self.pub_image_calib.publish(self.cvBridge.cv2_to_compressed_imgmsg(cv_image_calib, "jpg"))

        # adding Gaussian blur to the image of original
        cv_image_original = cv2.GaussianBlur(cv_image_original, (5, 5), 0)

        ## homography transform process
        # selecting 4 points from the original image
        pts_src = np.array([[self.img_center_x - top_x, top_y], [self.img_center_x + top_x, top_y], [self.img_center_x + bottom_x, bottom_y], [self.img_center_x - bottom_x, bottom_y]])

        # selecting 4 points from image that will be transformed
        pts_dst = np.array([[0, 0], [320, 0], [320, 180], [0, 180]])

        # finding homography matrix
        h, status = cv2.findHomography(pts_src, pts_dst)

        # homography process
        cv_image_homography = cv2.warpPerspective(cv_image_original, h, (320, 180))

        # fill the empty space with black triangles on left and right side of bottom
        # triangle1 = np.array([[0, 599], [0, 340], [200, 599]], np.int32)
        # triangle2 = np.array([[999, 599], [999, 340], [799, 599]], np.int32)
        # black = (0, 0, 0)
        # white = (255, 255, 255)
        # cv_image_homography = cv2.fillPoly(cv_image_homography, [triangle1, triangle2], black)

        # publishes ground-project image in compressed type
        self.pub_image_projected.publish(self.cvBridge.cv2_to_compressed_imgmsg(cv_image_homography, "jpg"))

    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('lane_projection')
    node = ImageProjection()
    node.main()
